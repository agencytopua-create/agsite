#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω –∏–∑ UAH (–≥—Ä–∏–≤–Ω—ã) –≤ USD (–¥–æ–ª–ª–∞—Ä—ã –°–®–ê)
–ö—É—Ä—Å: 1 USD = 41.22 UAH (–ø–æ –¥–∞–Ω–Ω—ã–º –ù–ë–£ –Ω–∞ 1 –Ω–æ—è–±—Ä—è 2025)
"""

import os
import re
from pathlib import Path

# –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ (1 USD = 41.22 UAH)
UAH_TO_USD_RATE = 41.22

def round_price(usd_amount):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if usd_amount >= 1000:
        # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 50
        return round(usd_amount / 50) * 50
    elif usd_amount >= 100:
        # –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å—É–º–º –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 10
        return round(usd_amount / 10) * 10
    elif usd_amount >= 10:
        # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
        return round(usd_amount)
    else:
        # –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—É–º–º –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
        rounded = round(usd_amount, 1)
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–ª–æ–µ
        if rounded == int(rounded):
            return int(rounded)
        return rounded

def format_price(usd_amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    rounded = round_price(usd_amount)
    if isinstance(rounded, float) and rounded < 1:
        return f"{rounded:.2f}"
    elif isinstance(rounded, float) and rounded < 10:
        return f"{rounded:.1f}"
    elif rounded >= 1000:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Ç—ã—Å—è—á: 1000 -> 1,000
        return f"{rounded:,}".replace(",", ".")
    else:
        return str(int(rounded)) if rounded == int(rounded) else str(rounded)

def extract_number_from_string(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–∞—Ö–æ–¥–∏–º —á–∏—Å–ª–æ
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: 15.000, 15,000, 15000, 500, 30 –∏ —Ç.–¥.
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —á–∏—Å–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á)
    patterns = [
        r'(\d{1,3}(?:\.\d{3})+)',  # 15.000, 10.000
        r'(\d{1,3}(?:,\d{3})+)',   # 15,000, 10,000
        r'(\d+)',                    # 500, 30, 90
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            number_str = match.group(1).replace('.', '').replace(',', '')
            return int(number_str)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω, –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥
    digits = re.findall(r'\d+', text)
    if digits:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Ü–µ–Ω–∞)
        numbers = [int(d) for d in digits]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Ü–µ–Ω–∞)
        return max(numbers) if numbers else None
    
    return None

def convert_uah_to_usd(content):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ü–µ–Ω—ã –∏–∑ UAH –≤ USD –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞"""
    original_content = content
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: <strong>15.000</strong><span>UAH</span> –∏–ª–∏ <strong>90</strong><span>UAH</span>
    def replace_html_price(match):
        price_str = match.group(1)
        price_uah = extract_number_from_string(price_str)
        if price_uah:
            price_usd = price_uah / UAH_TO_USD_RATE
            formatted_price = format_price(price_usd)
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã
            return f'<strong>{formatted_price}</strong><span>$</span>'
        return match.group(0)
    
    content = re.sub(
        r'<strong>([0-9.,\s]+)</strong>\s*<span>UAH</span>',
        replace_html_price,
        content,
        flags=re.IGNORECASE
    )
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –í —Ç–µ–∫—Å—Ç–µ "15,000 UAH" –∏–ª–∏ "90 UAH per 1000 characters"
    def replace_text_price(match):
        full_match = match.group(0)
        price_str = match.group(1)
        price_uah = extract_number_from_string(price_str)
        if price_uah:
            price_usd = price_uah / UAH_TO_USD_RATE
            formatted_price = format_price(price_usd)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á (—Ç–æ—á–∫–∞ –∏–ª–∏ –∑–∞–ø—è—Ç–∞—è)
            had_thousands_sep = '.' in price_str or ',' in price_str
            original_int = int(price_str.replace('.', '').replace(',', '').replace(' ', ''))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(formatted_price, str):
                price_int = int(float(formatted_price.replace('.', '').replace(',', '')))
            else:
                price_int = int(formatted_price)
            
            # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±—ã–ª–∞ –±–æ–ª—å—à–æ–π –∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if original_int >= 1000 and had_thousands_sep:
                formatted_display = f"{price_int:,}".replace(',', '.')
            else:
                formatted_display = str(formatted_price)
            
            # –ó–∞–º–µ–Ω—è–µ–º UAH –Ω–∞ $
            result = full_match.replace(price_str, formatted_display).replace('UAH', '$').replace('uah', '$')
            return result
        return match.group(0)
    
    # –ó–∞–º–µ–Ω—è–µ–º "X UAH" –≤ —Ç–µ–∫—Å—Ç–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    patterns = [
        (r'(\d{1,3}(?:\.\d{3})+)\s*UAH', replace_text_price),     # 15.000 UAH
        (r'(\d{1,3}(?:,\d{3})+)\s*UAH', replace_text_price),       # 15,000 UAH
        (r'(\d{1,3}(?:\s\d{3})+)\s*UAH', replace_text_price),     # 50 000 UAH, 1 000 000 UAH
        (r'(\d+)\s*UAH', replace_text_price),                      # 90 UAH, 500 UAH
    ]
    
    for pattern, replacer in patterns:
        content = re.sub(pattern, replacer, content, flags=re.IGNORECASE)
    
    return content

def process_file(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    full_path = Path(file_path)
    
    if not full_path.exists():
        print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(full_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        content = convert_uah_to_usd(content)
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        if content != original_content:
            with open(full_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
            return True
        else:
            print(f"‚è≠Ô∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files_list_path = Path("uah_files_full_list.txt")
    
    if not files_list_path.exists():
        print("‚ùå –§–∞–π–ª uah_files_full_list.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(files_list_path, 'r', encoding='utf-8') as f:
        files = [line.strip() for line in f if line.strip() and not line.startswith('#')]
    
    updated_count = 0
    skipped_count = 0
    error_count = 0
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ü–µ–Ω –∏–∑ UAH –≤ USD...")
    print(f"üìä –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 USD = {UAH_TO_USD_RATE} UAH\n")
    
    for file_path in files:
        result = process_file(file_path)
        if result:
            updated_count += 1
        elif result is False and "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(result):
            skipped_count += 1
        elif result is False:
            skipped_count += 1
        else:
            error_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"   üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

if __name__ == "__main__":
    main()

